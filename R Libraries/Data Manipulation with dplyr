                                                           # /*\ TRANSFORMING DATA WITH DPLYR /*\
                                                           
# Select the columns
  counties %>%
    select(state, county, population, poverty)
    
# Add a verb to sort in descending order of public_work
  counties_selected <- counties %>%
    select(state, county, population, private_work, public_work, self_employed)

  counties_selected %>%
    arrange(desc(public_work))
    
# Filter for counties with a population above 1000000
  counties_selected <- counties %>%
    select(state, county, population)

  counties_selected %>%
    filter(state == "California",
           population > 1000000)
           
 # Filter for Texas and more than 10000 people; sort in descending order of private_work
  counties_selected <- counties %>%
    select(state, county, population, private_work, public_work, self_employed)

 # Filter for Texas and more than 10000 people
  counties_selected %>%
    filter(state == "Texas",
           population > 10000) %>%
           
 # Sort in descending order of private_work
    arrange(desc(private_work))
    
# Sort in descending order of the public_workers column
  counties_selected <- counties %>%
    select(state, county, population, public_work)
  
  counties_selected %>%
    mutate(public_workers = public_work * population / 100) %>%
    arrange(desc(public_workers))
    
# Select the columns state, county, population, men, and women
  counties_selected <- counties %>%
    select(state, county, population, men, women)
  
# Calculate proportion_women as the fraction of the population made up of women
  counties_selected %>%
    mutate(proportion_women = (women/population))
    
# Select the five columns 
  counties %>%
    select(state, county, population, men, women) %>%
# Add the proportion_men variable
    mutate(proportion_men = (men/population)) %>%
# Filter for population of at least 10,000
    filter(population >= 10000) %>%
# Arrange proportion of men in descending order 
    arrange(desc(proportion_men))
    
                                                           # /*\ AGGREGATING DATA /*\

# Use count to find the number of counties in each region
  counties_selected %>%
    count(region, sort = TRUE)
    
# Find number of counties per state, weighted by citizens, sorted in descending order
  counties_selected %>%
    count(state, wt = citizens, sort = TRUE)
    
# Add population_walk containing the total number of people who walk to work 
  counties_selected %>%
    mutate(population_walk = population * walk / 100) %>%
    
# Count weighted by the new column, sort in descending order
    count(state, wt = population_walk, sort = TRUE)
    
# Summarize to find minimum population, maximum unemployment, and average income
  counties_selected %>%
    summarize(min_population = min(population), max_unemployment = max(unemployment), average_income = mean(income))
    
# Group by state 
  counties_selected %>%
    group_by(state) %>%
    
# Find the total area and population
    summarize(total_area = sum(land_area), total_population = sum(population))
    
# Add a density column
    mutate(density = total_population / total_area) %>%
    
# Sort by density in descending order
    arrange(desc(density))
    
# Group and summarize to find the total population
  counties_selected %>%
    group_by(region, state) %>%
    summarize(total_pop = sum(population))
    
# Calculate the average_pop and median_pop columns 
  summarize(average_pop = mean(total_pop),
            median_pop = median(total_pop))
            
# Group by region
  counties_selected %>%
    group_by(region) %>%

# Find the greatest number of citizens who walk to work
    top_n(1, walk)
    
# Calculate average income
  counties_selected %>%
    group_by(region, state) %>%
    summarize(average_income = mean(income))%>%

# Find the highest income state in each region
    top_n(1, average_income)
    
# Find the total population for each combination of state and metro
  counties_selected %>%
    group_by(state, metro) %>%
    summarize(total_pop = sum(population)) %>%
    
# Extract the most populated row for each state
    top_n(1, total_pop) %>%
    
# Count the states with more people in Metro or Nonmetro areas
    ungroup() %>% 
    count(metro)
    
                                                     # /*\ SELECTING AND TRANSFORMING DATA /*\
                                                     
# Glimpse the counties table
  glimpse(counties)

  counties %>%
# Select state, county, population, and industry-related columns
    select(state,county,population, professional:production) %>%
    
# Arrange service in descending order 
    arrange(desc(service))

# Select the state, county, population, and those ending with "work"
  counties %>%
    select(state, county, population, ends_with("work")) %>%
    
# Filter for counties that have at least 50% of people engaged in public work
    filter(public_work >= 50)
    
# Count the number of counties in each state
  counties %>%
    count(state) %>%
    
# Rename the n column to num_counties
    rename(num_counties = n)
    
# Select state, county, and poverty as poverty_rate
  counties %>%
    select(state, county, poverty_rate = poverty)
    
# Keep the state, county, and populations columns, and add a density column
  counties %>%
    transmute(state, county, population, density = population / land_area) %>%

# Filter for counties with a population greater than one million 
    filter(population > 1000000) %>%

# Sort density in ascending order 
    arrange(density)
    
# Change the name of the unemployment column
  counties %>%
    rename(unemployment_rate = unemployment)

# Keep the state and county columns, and the columns containing poverty
  counties %>%
    select(state, county, contains("poverty"))

# Calculate the fraction_women column without dropping the other columns
  counties %>%
    mutate(fraction_women = women / population)

# Keep only the state, county, and employment_rate columns
  counties %>%
    transmute(state, county, employment_rate = employed / population)
    
                                                  # /*\ CASE STUDY: THE BABYNAMES DATASET /*\

# Filter for the year 1990
  babynames %>%
    filter(year == 1990) %>%

# Sort the number column in descending order 
    arrange(desc(number))
  
# Find the most common name in each year
  babynames %>%
    group_by(year) %>%
    top_n(1, number)
    
# Filter for the names Steven, Thomas, and Matthew 
  selected_names <- babynames %>%
    filter(name %in% c("Steven", "Thomas", "Matthew"))
    
# Filter for the names Steven, Thomas, and Matthew 
  selected_names <- babynames %>%
    filter(name %in% c("Steven", "Thomas", "Matthew"))

# Plot the names using a different color for each name
  ggplot(selected_names, aes(x = year, y = number, color = name)) +
    geom_line()
    
# Calculate the fraction of people born each year with the same name
  babynames %>%
    group_by(year) %>%
    mutate(year_total = sum(number)) %>%
    ungroup() %>%
    mutate(fraction = number / year_total) %>%
    
# Find the year each name is most common
    group_by(name) %>%
    top_n(1, fraction)
    
# Add columns name_total and name_max for each name
  babynames %>%
    group_by(name) %>%
    mutate(name_total = sum(number),
           name_max = max(number)) %>%
           
# Ungroup the table 
    ungroup() %>%
    
# Add the fraction_max column containing the number by the name maximum 
    mutate(fraction_max = number / name_max)
    
# Filter for the names Steven, Thomas, and Matthew
  names_filtered <- names_normalized %>%
    filter(name %in% c("Steven", "Thomas", "Matthew"))

# Visualize these names over time
  ggplot(names_filtered, aes(x = year, y = fraction_max, color = name)) +
    geom_line()
    
# Arrange the data in order of name, then year 
  babynames_fraction %>%
    arrange(name, year) %>%
  
# Group the data by name
    group_by(name) %>%
  
# Add a ratio column that contains the ratio of fraction between each year 
    mutate(ratio = fraction / lag(fraction))
    
# Extract the largest ratio from each name 
  babynames_ratios_filtered %>%
    top_n(1, ratio) %>%

# Sort the ratio column in descending order 
    arrange(desc(ratio)) %>%

# Filter for fractions greater than or equal to 0.001
    filter(fraction >= 0.001)
