                                                           # /*\ TRANSFORMING DATA WITH DPLYR /*\
                                                           
# Select the columns
  counties %>%
    select(state, county, population, poverty)
    
# Add a verb to sort in descending order of public_work
  counties_selected <- counties %>%
    select(state, county, population, private_work, public_work, self_employed)

  counties_selected %>%
    arrange(desc(public_work))
    
# Filter for counties with a population above 1000000
  counties_selected <- counties %>%
    select(state, county, population)

  counties_selected %>%
    filter(state == "California",
           population > 1000000)
           
 # Filter for Texas and more than 10000 people; sort in descending order of private_work
  counties_selected <- counties %>%
    select(state, county, population, private_work, public_work, self_employed)

 # Filter for Texas and more than 10000 people
  counties_selected %>%
    filter(state == "Texas",
           population > 10000) %>%
           
 # Sort in descending order of private_work
    arrange(desc(private_work))
    
# Sort in descending order of the public_workers column
  counties_selected <- counties %>%
    select(state, county, population, public_work)
  
  counties_selected %>%
    mutate(public_workers = public_work * population / 100) %>%
    arrange(desc(public_workers))
    
# Select the columns state, county, population, men, and women
  counties_selected <- counties %>%
    select(state, county, population, men, women)
  
# Calculate proportion_women as the fraction of the population made up of women
  counties_selected %>%
    mutate(proportion_women = (women/population))
    
# Select the five columns 
  counties %>%
    select(state, county, population, men, women) %>%
# Add the proportion_men variable
    mutate(proportion_men = (men/population)) %>%
# Filter for population of at least 10,000
    filter(population >= 10000) %>%
# Arrange proportion of men in descending order 
    arrange(desc(proportion_men))
    
                                                           # /*\ AGGREGATING DATA /*\

# Use count to find the number of counties in each region
  counties_selected %>%
    count(region, sort = TRUE)
    
# Find number of counties per state, weighted by citizens, sorted in descending order
  counties_selected %>%
    count(state, wt = citizens, sort = TRUE)
    
# Add population_walk containing the total number of people who walk to work 
  counties_selected %>%
    mutate(population_walk = population * walk / 100) %>%
    
# Count weighted by the new column, sort in descending order
    count(state, wt = population_walk, sort = TRUE)
    
# Summarize to find minimum population, maximum unemployment, and average income
  counties_selected %>%
    summarize(min_population = min(population), max_unemployment = max(unemployment), average_income = mean(income))
    
# Group by state 
  counties_selected %>%
    group_by(state) %>%
    
# Find the total area and population
    summarize(total_area = sum(land_area), total_population = sum(population))
    
# Add a density column
    mutate(density = total_population / total_area) %>%
    
# Sort by density in descending order
    arrange(desc(density))
    
# Group and summarize to find the total population
  counties_selected %>%
    group_by(region, state) %>%
    summarize(total_pop = sum(population))
    
# Calculate the average_pop and median_pop columns 
  summarize(average_pop = mean(total_pop),
            median_pop = median(total_pop))
            
# Group by region
  counties_selected %>%
    group_by(region) %>%

# Find the greatest number of citizens who walk to work
    top_n(1, walk)
    
# Calculate average income
  counties_selected %>%
    group_by(region, state) %>%
    summarize(average_income = mean(income))%>%

# Find the highest income state in each region
    top_n(1, average_income)
    
# Find the total population for each combination of state and metro
  counties_selected %>%
    group_by(state, metro) %>%
    summarize(total_pop = sum(population)) %>%
    
# Extract the most populated row for each state
    top_n(1, total_pop) %>%
    
# Count the states with more people in Metro or Nonmetro areas
    ungroup() %>% 
    count(metro)
    
                                                     # /*\ SELECTING AND TRANSFORMING DATA /*\
                                                     
# Glimpse the counties table
  glimpse(counties)

  counties %>%
# Select state, county, population, and industry-related columns
    select(state,county,population, professional:production) %>%
    
# Arrange service in descending order 
    arrange(desc(service))
