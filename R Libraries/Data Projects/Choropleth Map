install.packages("devtools")
install.packages("ggmap")
install.packages("stringr")
install.packages(c("maps", "mapdata"))
devtools::install_github("dkahle/ggmap")
install.packages(c("sf","tmap", "RColorBrewer", "cartogram"))

library("ggplot2")
library("dplyr")
library("plotly")
library("ggmap")
library("stringr")
library("maps")
library("mapdata")
library("tidyverse")
library("tmap")
library("RColorBrewer")
library("cartogram")
library("sf")

# ------------------------------------------------------

Indiana <- read.csv("/Users/maustin/Desktop/Indiana.csv")
summary(Indiana)
head(Indiana)

wss <- 0

for (i in 1:15) {
  km.out <- kmeans(Indiana, centers = i, nstart = 20)
  wss[i] <- km.out$tot.withinss
}

km.out <- kmeans(Indiana, centers=3, nstart=20)

Indiana[1:3,1] <- c(NA, Inf, NaN)
sum(sapply(Indiana, is.na))
sum(sapply(Indiana, is.infinite))
sum(sapply(Indiana, is.nan))

Indiana <- Indiana[complete.cases(Indiana),]
sum(sapply(Indiana, is.infinite))

# /*\ Check dataframe before and after transformations /*\

Indiana[apply(sapply(Indiana, is.finite), 1, all),]

Indiana <- do.call(data.frame, lapply(Indiana, function(x) replace(x, is.infinite(x), NA)))
sum(sapply(Indiana, is.infinite))                           # Received output of 0

Indiana <- Indiana[complete.cases(Indiana),]

sum(sapply(Indiana, is.na))
sum(sapply(Indiana, is.infinite))
sum(sapply(Indiana, is.nan))                                 # Received all outputs of 0

IndianaClusters <- Indiana
drops <- c("ST","STATE", "ST_ABBR", "STCNTY", "COUNTY", "FIPS", "LOCATION")
IndianaClusters[ , !(names(IndianaClusters) %in% drops)]


IndianaClusters <- Indiana %>%
  select(E_NOHSDP, E_POV, E_UNEMP, E_PCI, E_MINRTY)

for (i in 1:15) {
  km.out <- kmeans(IndianaClusters, centers = i, nstart = 20)
  wss[i] <- km.out$tot.withinss
}

plot(1:15, wss, type = "b", 
     xlab = "Number of Clusters", 
     ylab = "Within groups sum of squares")
# 2 clusters

kmean <- kmeans(IndianaClusters, 2)
kmean$centers
autoplot(kmean, IndianaClusters, frame = TRUE)

kmean <- kmeans(IndianaClusters, 5)
kmean$centers
autoplot(kmean, IndianaClusters, frame = TRUE)

kmeansRes<-factor(kmean$cluster)
Indiana$cluster <- kmean$cluster

# View(Indiana)
# colnames(Indiana)

# ------------------------------------------------------

IndianaPlotting_V1 = Indiana %>%
  dplyr::select(STATE,ST_ABBR, COUNTY, ECON_REGION, FIPS, LOCATION, RPL_THEMES,
         E_NOHSDP, E_POV, E_UNEMP, E_PCI, E_MINRTY, cluster)

IndianaPlotting_V1 <- subset(IndianaPlotting_V1, RPL_THEMES != "-999")

IndianaPlotting_V1 <- tibble::rowid_to_column(IndianaPlotting_V1, "ID")
# View(IndianaPlotting_V1)

summary(IndianaPlotting_V1)

# ------------------------------------------------------

usa <- map_data("usa")
dim(usa)
head(usa)

w2hr <- map_data("world2Hires")
dim(w2hr)
head(w2hr)

ggplot() + geom_polygon(data = usa, aes(x=long, y = lat, group = group)) + 
  coord_fixed(1.3)

states <- map_data("state")
dim(states)
head(states)

ggplot(data = states) + 
  geom_polygon(aes(x = long, y = lat, fill = region, group = group), color = "white") + 
  coord_fixed(1.3) +
  guides(fill="none")

Indiana_map <- subset(states, region == "indiana")
ggplot(data = Indiana_map) + 
  geom_polygon(aes(x = long, y = lat, group = group), fill = "palegreen", color = "black") + 
  coord_fixed(1.3)

# ------------------------------------------------------

counties <- map_data("county")
in_county <- subset(counties, region == "indiana") 

capFirst <- function(s) {
  paste(toupper(substring(s, 1, 1)), substring(s, 2), sep = "")
  }

in_county$subregion <- capFirst(in_county$subregion)

in_county["23944", "subregion"] <- "DeKalb"
in_county["23945", "subregion"] <- "DeKalb"
in_county["23946", "subregion"] <- "DeKalb"
in_county["23947", "subregion"] <- "DeKalb"
in_county["23948", "subregion"] <- "DeKalb"
in_county["23949", "subregion"] <- "DeKalb"

in_county["24905", "subregion"] <- "St. Joseph"
in_county["24906", "subregion"] <- "St. Joseph"
in_county["24907", "subregion"] <- "St. Joseph"
in_county["24908", "subregion"] <- "St. Joseph"
in_county["24909", "subregion"] <- "St. Joseph"
in_county["24910", "subregion"] <- "St. Joseph"
in_county["24911", "subregion"] <- "St. Joseph"
in_county["24912", "subregion"] <- "St. Joseph"
in_county["24913", "subregion"] <- "St. Joseph"
in_county["24914", "subregion"] <- "St. Joseph"
in_county["24915", "subregion"] <- "St. Joseph"
in_county["24916", "subregion"] <- "St. Joseph"
in_county["24917", "subregion"] <- "St. Joseph"
in_county["24918", "subregion"] <- "St. Joseph"
in_county["24919", "subregion"] <- "St. Joseph"

in_county["24494", "subregion"] <- "LaPorte"
in_county["24495", "subregion"] <- "LaPorte"
in_county["24496", "subregion"] <- "LaPorte"
in_county["24497", "subregion"] <- "LaPorte"
in_county["24498", "subregion"] <- "LaPorte"
in_county["24499", "subregion"] <- "LaPorte"
in_county["24500", "subregion"] <- "LaPorte"
in_county["24501", "subregion"] <- "LaPorte"
in_county["24502", "subregion"] <- "LaPorte"
in_county["24503", "subregion"] <- "LaPorte"
in_county["24504", "subregion"] <- "LaPorte"
in_county["24505", "subregion"] <- "LaPorte"
in_county["24506", "subregion"] <- "LaPorte"
in_county["24507", "subregion"] <- "LaPorte"
in_county["24508", "subregion"] <- "LaPorte"
in_county["24509", "subregion"] <- "LaPorte"
in_county["24510", "subregion"] <- "LaPorte"
in_county["24511", "subregion"] <- "LaPorte"
in_county["24512", "subregion"] <- "LaPorte"
in_county["24513", "subregion"] <- "LaPorte"
in_county["24514", "subregion"] <- "LaPorte"
in_county["24515", "subregion"] <- "LaPorte"

in_county["24464", "subregion"] <- "LaGrange"
in_county["24465", "subregion"] <- "LaGrange"
in_county["24466", "subregion"] <- "LaGrange"
in_county["24467", "subregion"] <- "LaGrange"
in_county["24468", "subregion"] <- "LaGrange"
in_county["24469", "subregion"] <- "LaGrange"

# View(in_county)

in_econ_regions <- subset(counties, region == "indiana")
# View(in_econ_regions)

capFirst <- function(s) {
  paste(toupper(substring(s, 1, 1)), substring(s, 2), sep = "")
}

in_econ_regions$subregion <- capFirst(in_econ_regions$subregion)

in_econ_regions["23944", "subregion"] <- "DeKalb"
in_econ_regions["23945", "subregion"] <- "DeKalb"
in_econ_regions["23946", "subregion"] <- "DeKalb"
in_econ_regions["23947", "subregion"] <- "DeKalb"
in_econ_regions["23948", "subregion"] <- "DeKalb"
in_econ_regions["23949", "subregion"] <- "DeKalb"

in_econ_regions["24905", "subregion"] <- "St. Joseph"
in_econ_regions["24906", "subregion"] <- "St. Joseph"
in_econ_regions["24907", "subregion"] <- "St. Joseph"
in_econ_regions["24908", "subregion"] <- "St. Joseph"
in_econ_regions["24909", "subregion"] <- "St. Joseph"
in_econ_regions["24910", "subregion"] <- "St. Joseph"
iin_econ_regions["24911", "subregion"] <- "St. Joseph"
in_econ_regions["24912", "subregion"] <- "St. Joseph"
in_econ_regions["24913", "subregion"] <- "St. Joseph"
in_econ_regions["24914", "subregion"] <- "St. Joseph"
in_econ_regions["24915", "subregion"] <- "St. Joseph"
in_econ_regions["24916", "subregion"] <- "St. Joseph"
in_econ_regions["24917", "subregion"] <- "St. Joseph"
in_econ_regions["24918", "subregion"] <- "St. Joseph"
in_econ_regions["24919", "subregion"] <- "St. Joseph"

in_econ_regions["24494", "subregion"] <- "LaPorte"
in_econ_regions["24495", "subregion"] <- "LaPorte"
in_econ_regions["24496", "subregion"] <- "LaPorte"
in_econ_regions["24497", "subregion"] <- "LaPorte"
in_econ_regions["24498", "subregion"] <- "LaPorte"
in_econ_regions["24499", "subregion"] <- "LaPorte"
in_econ_regions["24500", "subregion"] <- "LaPorte"
in_econ_regions["24501", "subregion"] <- "LaPorte"
in_econ_regions["24502", "subregion"] <- "LaPorte"
in_econ_regions["24503", "subregion"] <- "LaPorte"
in_econ_regions["24504", "subregion"] <- "LaPorte"
in_econ_regions["24505", "subregion"] <- "LaPorte"
in_econ_regions["24506", "subregion"] <- "LaPorte"
in_econ_regions["24507", "subregion"] <- "LaPorte"
in_econ_regions["24508", "subregion"] <- "LaPorte"
in_econ_regions["24509", "subregion"] <- "LaPorte"
in_econ_regions["24510", "subregion"] <- "LaPorte"
in_econ_regions["24511", "subregion"] <- "LaPorte"
in_econ_regions["24512", "subregion"] <- "LaPorte"
in_econ_regions["24513", "subregion"] <- "LaPorte"
in_econ_regions["24514", "subregion"] <- "LaPorte"
in_econ_regions["24515", "subregion"] <- "LaPorte"

in_econ_regions["24464", "subregion"] <- "LaGrange"
in_econ_regions["24465", "subregion"] <- "LaGrange"
in_econ_regions["24466", "subregion"] <- "LaGrange"
in_econ_regions["24467", "subregion"] <- "LaGrange"
in_econ_regions["24468", "subregion"] <- "LaGrange"
in_econ_regions["24469", "subregion"] <- "LaGrange"

in_econ_regions <- left_join(IndianaPlotting_V1, in_econ_regions, by = c("COUNTY" = "subregion"))
# View(in_econ_regions)

in_econ_regions <- in_econ_regions %>%
  select(STATE, COUNTY, ECON_REGION, long, lat, group, order, region)

pal <- c(
  "1" = "lightgreen",
  "2" = "pink", 
  "3" = "mediumturquoise", 
  "4" = "yellow1", 
  "5" = "orange",
  "6" = "royalblue1", 
  "7" = "tomato1", 
  "8" = "steelblue1", 
  "9" = "springgreen4",
  "10" = "salmon", 
  "11" = "mediumpurple", 
  "12" = "lavendarblush"
)

# ------------------------------------------------------

in_base <- ggplot(data = Indiana_map, mapping = aes(x = long, y = lat, group = group)) + 
  coord_fixed(1.3) + 
  geom_polygon(color = "black", fill = "gray")
in_base + theme_nothing()

in_base + theme_nothing() + 
  geom_polygon(data = in_county, fill = NA, color = "white") +
  geom_polygon(color = "black", fill = NA) 

IndianaPlotting_V2 <- inner_join(IndianaPlotting_V1, in_county, by = c("COUNTY" = "subregion"))
summary(IndianaPlotting_V2)
# View(IndianaPlotting_V2)

# ------------------------------------------------------

ditch_the_axes <- theme(
  axis.text = element_blank(),
  axis.line = element_blank(),
  axis.ticks = element_blank(),
  panel.border = element_blank(),
  panel.grid = element_blank(),
  axis.title = element_blank()
  )

elbow_room1 <- in_base + 
  geom_polygon(data = IndianaPlotting_V2, aes(fill = RPL_THEMES), color = "white") +
  geom_polygon(color = "black", fill = NA) +
  theme_bw() +
  ditch_the_axes

elbow_room1

# ------------------------------------------------------


# OUTSTANDING:
    # Make Interactive
    # Add Dropdown Menu
    # Color Gradients Based on Economic Regions

# Try adding just outline of counties and filling based on regions
