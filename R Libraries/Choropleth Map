install.packages("devtools")
install.packages("ggmap")
install.packages("stringr")
install.packages(c("maps", "mapdata"))
devtools::install_github("dkahle/ggmap")

library("ggplot2")
library("dplyr")
library("plotly")
library("ggmap")
library("stringr")
library("maps")
library("mapdata")
library("tidyverse")

# ------------------------------------------------------

Indiana <- read.csv("/Users/maustin/Desktop/Indiana.csv")
summary(Indiana)
head(Indiana)

wss <- 0

for (i in 1:15) {
  km.out <- kmeans(Indiana, centers = i, nstart = 20)
  wss[i] <- km.out$tot.withinss
}

km.out <- kmeans(Indiana, centers=3, nstart=20)

Indiana[1:3,1] <- c(NA, Inf, NaN)
sum(sapply(Indiana, is.na))
sum(sapply(Indiana, is.infinite))
sum(sapply(Indiana, is.nan))

Indiana <- Indiana[complete.cases(Indiana),]
sum(sapply(Indiana, is.infinite))

# /*\ Check dataframe before and after transformations /*\

Indiana[apply(sapply(Indiana, is.finite), 1, all),]

Indiana <- do.call(data.frame, lapply(Indiana, function(x) replace(x, is.infinite(x), NA)))
sum(sapply(Indiana, is.infinite))                           # Received output of 0

Indiana <- Indiana[complete.cases(Indiana),]

sum(sapply(Indiana, is.na))
sum(sapply(Indiana, is.infinite))
sum(sapply(Indiana, is.nan))                                 # Received all outputs of 0

IndianaClusters <- Indiana
drops <- c("ST","STATE", "ST_ABBR", "STCNTY", "COUNTY", "FIPS", "LOCATION")
IndianaClusters[ , !(names(IndianaClusters) %in% drops)]


IndianaClusters <- Indiana %>%
  select(E_NOHSDP, E_POV, E_UNEMP, E_PCI, E_MINRTY)

for (i in 1:15) {
  km.out <- kmeans(IndianaClusters, centers = i, nstart = 20)
  wss[i] <- km.out$tot.withinss
}

plot(1:15, wss, type = "b", 
     xlab = "Number of Clusters", 
     ylab = "Within groups sum of squares")
# 2 clusters

kmean <- kmeans(IndianaClusters, 2)
kmean$centers
autoplot(kmean, IndianaClusters, frame = TRUE)

kmean <- kmeans(IndianaClusters, 5)
kmean$centers
autoplot(kmean, IndianaClusters, frame = TRUE)

kmeansRes<-factor(kmean$cluster)
Indiana$cluster <- kmean$cluster

View(Indiana)
colnames(Indiana)

# ------------------------------------------------------

IndianaPlotting_V1 = Indiana %>%
  dplyr::select(STATE,ST_ABBR, COUNTY, ECON_REGION, FIPS, LOCATION, RPL_THEMES,
         E_NOHSDP, E_POV, E_UNEMP, E_PCI, E_MINRTY, cluster)

IndianaPlotting_V1 <- subset(IndianaPlotting_V1, RPL_THEMES != "-999"))

IndianaPlotting_V1 <- tibble::rowid_to_column(IndianaPlotting_V1, "ID")
View(IndianaPlotting_V1)

# ------------------------------------------------------

usa <- map_data("usa")
dim(usa)
head(usa)

w2hr <- map_data("world2Hires")
dim(w2hr)
head(w2hr)

ggplot() + geom_polygon(data = usa, aes(x=long, y = lat, group = group)) + 
  coord_fixed(1.3)

states <- map_data("state")
dim(states)
head(states)

ggplot(data = states) + 
  geom_polygon(aes(x = long, y = lat, fill = region, group = group), color = "white") + 
  coord_fixed(1.3) +
  guides(fill=FALSE)

Indiana_map <- subset(states, region == "indiana")
ggplot(data = Indiana_map) + 
  geom_polygon(aes(x = long, y = lat, group = group), fill = "palegreen", color = "black") + 
  coord_fixed(1.3)

# ------------------------------------------------------

counties <- map_data("county")
in_county <- subset(counties, region == "indiana") %>%
  select(long, lat, subregion)

in_county <- in_county[!duplicated(in_county$subregion), ]

capFirst <- function(s) {
  paste(toupper(substring(s, 1, 1)), substring(s, 2), sep = "")
  }

in_county$subregion <- capFirst(in_county$subregion)
View(in_county)

in_county["23944", "subregion"] <- "De Kalb"
in_county["24905", "subregion"] <- "St. Joseph"
in_county["24494", "subregion"] <- "LaPorte"
in_county["24464", "subregion"] <- "LaGrange"
View(in_county)

# ------------------------------------------------------

in_base <- ggplot(data = Indiana_map, mapping = aes(x = long, y = lat, group = group)) + 
  coord_fixed(1.3) + 
  geom_polygon(color = "black", fill = "gray")
in_base + theme_nothing()

in_base + theme_nothing() + 
  geom_polygon(data = in_county, fill = NA, color = "white") +
  geom_polygon(color = "black", fill = NA)  # get the state border back on top

IndianaPlotting_V2 <- full_join(IndianaPlotting_V1, in_county, by = c("COUNTY" = "subregion"))
View(IndianaPlotting_V2)

IndianaPlotting_V2 <- left_join(IndianaPlotting_V1, IndianaPlotting_V2, by = "ID")
View(IndianaPlotting_V2)
