                                                              # /*\ INTRODUCTION /*\
                                                              
# Load the ggplot2 package
  library(ggplot2)

# Explore the mtcars data frame with str()
  str(mtcars)

# Execute the following command
  ggplot(mtcars, aes(cyl, mpg)) +
      geom_point()
    
# Load the ggplot2 package
  library(ggplot2)

# Change the command below so that cyl is treated as factor
  ggplot(mtcars, aes(factor(cyl), mpg)) +
      geom_point() 
    
# Edit to add a color aesthetic mapped to disp
  ggplot(mtcars, aes(wt, mpg, color = disp)) +
      geom_point()
      
# Change the color aesthetic to a size aesthetic
  ggplot(mtcars, aes(wt, mpg, size = disp)) +
      geom_point()
      
# Add geom_smooth() with +
  ggplot(diamonds, aes(carat, price)) +
      geom_point() +
      geom_smooth()
      
# Make the points 40% opaque
  ggplot(diamonds, aes(carat, price, color = clarity)) +
      geom_point(alpha = 0.4) +
      geom_smooth()
      
# Draw a ggplot, use the diamonds dataset, map x to carat and y to price, and add a point layer to plt_price_vs_carat
  plt_price_vs_carat <- ggplot(
      diamonds,
      aes(carat, price)
  )
  plot + geom_point()
  
# From previous step
  plt_price_vs_carat <- ggplot(diamonds, aes(carat, price))

# Edit this to make points 20% opaque: plt_price_vs_carat_transparent
  plt_price_vs_carat_transparent <- plt_price_vs_carat + geom_point(alpha = 0.2)
      plot + geom_point()
      
# From previous step
  plt_price_vs_carat <- ggplot(diamonds, aes(carat, price))

# Edit this to map color to clarity and assign the updated plot to a new object
  plt_price_vs_carat_by_clarity <- plt_price_vs_carat + geom_point(aes(color = clarity))
      plt_price_vs_carat_by_clarity

                                                              # /*\ AESTHETICS /*\

# Map x to mpg and y to fcyl
  ggplot(mtcars, aes(mpg, fcyl)) +
      geom_point()
      
# Set the shape and size of the points
  ggplot(mtcars, aes(wt, mpg, color = fcyl)) +
      geom_point(shape = 1, size = 4)
      
# Base layer
  plt_mpg_vs_wt <- ggplot(mtcars, aes(wt, mpg))

# Map fcyl to alpha, not size
  plt_mpg_vs_wt +
      geom_point(aes(size = fcyl))
      
# Base layer
plt_mpg_vs_wt <- ggplot(mtcars, aes(wt, mpg))

# Use text layer and map fcyl to label
  plt_mpg_vs_wt +
      geom_text(aes(label = fcyl))
      
# A hexadecimal color
  my_blue <- "#4ABEFF"

# Set the point color and alpha
  ggplot(mtcars, aes(wt, mpg)) +
      geom_point(color = my_blue, alpha = 0.6)
      
# Change the color mapping to a fill mapping and set point size and shape
  ggplot(mtcars, aes(wt, mpg, fill = fcyl)) +
      geom_point(color = my_blue, size = 10, shape = 1)
      
# Set the position
  palette <- c(automatic = "#377EB8", manual = "#E41A1C")
      ggplot(mtcars, aes(fcyl, fill = fam)) +
      geom_bar(position = 'dodge') +
      labs(x = "Number of Cylinders", y = "Count")
      scale_fill_manual("Transmission", values = palette)
      
# Plot 0 vs. mpg, add jitter, set y-axis limits
  ggplot(mtcars, aes(mpg, 0)) +
      geom_point(position = "jitter") +
      ylim(-2, 2)
      
                                                              # /*\ GEOMETRIES /*\

# Plot base
  plt_mpg_vs_fcyl_by_fam <- ggplot(mtcars, aes(fcyl, mpg, color = fam))

# Default points are shown for comparison
  plt_mpg_vs_fcyl_by_fam + 
      geom_point()

# Now jitter and dodge the point positions
  plt_mpg_vs_fcyl_by_fam + 
      geom_point(position = position_jitterdodge(jitter.width = 0.3, dodge.width = 0.3))
      
# Set the fill color to datacamp_light_blue
  datacamp_light_blue <- "#51A8C9"
      ggplot(mtcars, aes(mpg, ..density..)) +
      geom_histogram(binwidth = 1, fill = datacamp_light_blue)
      
# Change the position to identity, with transparency 0.4
  ggplot(mtcars, aes(mpg, fill = fam)) +
      geom_histogram(binwidth = 1, position = "identity", alpha = 0.4)
      
# Using economics, plot unemploy vs. date
  head(economics)
      ggplot(economics, aes(date, unemploy)) +
      geom_line()
      
# Plot the Rainbow Salmon time series
  ggplot(fish.species, aes(x = Year, y = Rainbow)) +
      geom_line()

# Plot the Pink Salmon time series
  ggplot(fish.species, aes(x = Year, y = Pink)) +
      geom_line()

# Plot multiple time-series by grouping by species
  ggplot(fish.tidy, aes(Year, Capture)) +
      geom_line(aes(group = Species))

# Plot multiple time-series by coloring by species
  ggplot(fish.tidy, aes(Year, Capture, color = Species)) +
      geom_line(aes(group = Species))
      
                                                              # /*\ THEMES /*\

# Changing and setting theme elements
  plt_prop_unemployed_over_time +
      theme(
        rect = element_rect(fill = "grey92"),
        legend.key = element_rect(color = NA),
        axis.ticks = element_blank(),
        panel.grid = element_blank(),
        panel.grid.major.y = element_line(
          color = "white",
          size = 0.5,
          linetype = "dotted"
      ),
      axis.text = element_text(color = "grey25"),
      plot.title = element_text(face = "italic", size = 16)
    )
    
# Set the axis tick length to 2 lines
  plt_mpg_vs_wt_by_cyl +
      theme(
        axis.ticks.length = unit(2, "lines")
      )
      
# Set the legend margin to (20, 30, 40, 50) points
  plt_mpg_vs_wt_by_cyl +
      theme(
        legend.margin = margin(20, 30, 40, 50, "pt")
      )
      
# Theme layer saved as an object, theme_recession
  theme_recession <- theme(
      rect = element_rect(fill = "grey92"),
      legend.key = element_rect(color = NA),
      axis.ticks = element_blank(),
      panel.grid = element_blank(),
      panel.grid.major.y = element_line(color = "white", size = 0.5, linetype = "dotted"),
      axis.text = element_text(color = "grey25"),
      plot.title = element_text(face = "italic", size = 16),
      legend.position = c(0.6, 0.1)
  )

# Combine the Tufte theme with theme_recession
  theme_tufte_recession <- theme_tufte() + theme_recession

# Add the recession theme to the plot
  plt_prop_unemployed_over_time + theme_tufte_recession
  
# Changing and setting theme elements
  plt_prop_unemployed_over_time +
      theme_tufte() +
        theme(
          legend.position = "none",
          axis.ticks = element_blank(),
          axis.title = element_text(color = "grey60"),
          axis.text = element_text(color = "grey60"),
          panel.grid.major.y = element_line(
            color = "grey60",
            size = 0.25,
            linetype = "dotted"
        )
  )
  
# Add a geom_segment() layer
  ggplot(gm2007, aes(x = lifeExp, y = country, color = lifeExp)) +
      geom_point(size = 4) +
      geom_segment(aes(xend = 30, yend = country), size = 2)
      
# Set the color scale
palette <- brewer.pal(5, "RdYlBu")[-(2:4)]

# Add a title and caption
  ggplot(gm2007, aes(x = lifeExp, y = country, color = lifeExp)) +
      geom_point(size = 4) +
      geom_segment(aes(xend = 30, yend = country), size = 2) +
      geom_text(aes(label = round(lifeExp,1)), color = "white", size = 1.5) +
      scale_x_continuous("", expand = c(0,0), limits = c(30,90), position = "top") +
      scale_color_gradientn(colors = palette) +
      labs(title = "Highest and lowest life expectancies, 2007", caption = "Source: gapminder")
      
# Add text
  plt_country_vs_lifeExp +
      step_1_themes +
      geom_vline(xintercept = global_mean, color = "grey40", linetype = 3) +
      annotate(
        "text",
        x = x_start, y = y_start,
        label = "The\nglobal\naverage",
        vjust = 1, size = 3, color = "grey40"
        )
  
# Add a curve
  plt_country_vs_lifeExp +
      step_1_themes +
      geom_vline(xintercept = global_mean, color = "grey40", linetype = 3) +
      step_3_annotation +
      annotate(
        "curve",
        x = x_start, y = y_start,
        xend = x_end, yend = y_end,
        arrow = arrow(length = unit(0.2, "cm"), type = "closed"),
        color = "grey40"
        )
